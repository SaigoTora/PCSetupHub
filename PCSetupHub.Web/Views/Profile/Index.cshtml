@using System.Globalization
@using System.Web

@using PCSetupHub.Data.Models.Hardware
@using PCSetupHub.Data.Models.Users
@using PCSetupHub.Web.Helpers
@using PCSetupHub.Web.ViewModels


@model User

@{
	ViewData["Title"] = $"{Model.Login}";
	<link rel="stylesheet" href="~/css/comment.css" />

	<!-- Cropper CSS and JS-->
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.css" integrity="sha512-C4k/QrN4udgZnXStNFS5osxdhVECWyhMsK1pnlk+LkC7yJGCqoYxW4mH3/ZXLweODyzolwdWSqmmadudSHMRLA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
	<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js" integrity="sha512-6lplKUSl86rUVprDIjiW8DuOniNX8UDoRATqZSds/7t6zCQZfaCe3e5zcGaQwxa8Kpn5RTM9Fvl3X2lLV4grPQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
	<script src="~/js/avatar-cropper.js"></script>

	string? userLogin = User.GetLogin();
	int? userId = User.GetId();
	bool canEditAvatar = (Model.Id == userId);
	PcConfiguration? pcConfig = Model.PcConfiguration;
	var rams = pcConfig?.GetRams();
	var ssds = pcConfig?.GetSsds();
	var hdds = pcConfig?.GetHdds();

	int page = 1;
	var rawPage = Context.Request.Query["commentPage"].ToString();
	if (!string.IsNullOrWhiteSpace(rawPage) && int.TryParse(rawPage, out var parsedPage))
	{
		page = parsedPage;
	}

	int commentCount = ViewData["CommentCount"] as int? ?? 0;
	int pageSize = ViewData["PageSize"] as int? ?? 1;
}

<section>
	<section class="d-inline">
		<img id="avatar-preview" src="@Model.AvatarUrl" alt="User avatar @Model.Name"
			 title="@(canEditAvatar ? "Change avatar" : "")" width="110" height="110"
			 class="user-avatar me-3 mb-3 @(canEditAvatar ? "cursor-pointer" : "")"
			 data-login="@Model.Login" @(canEditAvatar ? "data-can-edit='true'" : "") />

		<input type="file" id="avatar-input" accept="image/*" style="display: none;" />
	</section>

	<section class="mb-4 d-inline-flex justify-content-center">
		<span class="user-login me-4 text-white" translate="no">@Model.Login</span>
		@if (userLogin != null && userLogin == Model.Login)
		{
			<button class="user-action-btn me-2">Settings</button>
		}
		else if (userId.HasValue)
		{
			Friendship? friendship = Model.GetReceivedRequestFrom(userId.Value);
			if (friendship != null)
			{
				switch ((FriendshipStatusType)friendship.FriendshipStatusId)
				{
					case FriendshipStatusType.Pending:
						<button class="user-action-btn me-2">Requested</button>
						break;
					case FriendshipStatusType.Accepted:
						<button class="user-action-btn me-2">Friend</button>
						break;
					case FriendshipStatusType.Cancelled:
						<button class="user-action-btn me-2">Declined</button>
						break;
					default:
						<button class="user-action-btn me-2">Unknown</button>
						break;
				}
				<form class="d-inline-block me-3" asp-controller="Profile" asp-action="DeleteFriendship" asp-route-id="@friendship.Id" method="post">
					<button class="user-action-btn"><i class="d-flex justify-content-center align-items-center fa fa-user-slash text-danger"></i></button>
				</form>
			}
			else
			{
				friendship = Model.GetSentRequestTo(userId.Value);
				if (friendship != null)
				{
					FriendshipStatusType status = (FriendshipStatusType)friendship.FriendshipStatusId;
					string highlightClass = status == FriendshipStatusType.Pending ? "friend-status-select-highlighted" : string.Empty;

					<form class="d-inline-block me-2" asp-controller="Profile" asp-action="UpdateFriendshipStatus" asp-route-id="@friendship.Id" method="post">
						<select name="newStatusId" class="friend-status-select @highlightClass" onchange="this.form.submit()" title="Choose friendship status">
							@if (status == FriendshipStatusType.Pending)
							{
								<option hidden>Respond</option>
							}
							else if (status == FriendshipStatusType.Accepted)
							{
								<option hidden>Friend</option>
							}

							@if (status != FriendshipStatusType.Accepted)
							{
								<option value=@((int)FriendshipStatusType.Accepted) selected="@(friendship.FriendshipStatusId == (int)FriendshipStatusType.Accepted)">Accept</option>
							}
							<option value=@((int)FriendshipStatusType.Cancelled) selected="@(friendship.FriendshipStatusId == (int)FriendshipStatusType.Cancelled)">Reject</option>
						</select>
					</form>
				}
				else
				{
					<form class="d-inline-block me-2" asp-controller="Profile" asp-action="SendFriendRequest" asp-route-id="@Model.Id" method="post">
						<button class="user-action-btn friend-status-select-highlighted">Follow</button>
					</form>
				}
			}
		}
		@if (userId != Model.Id)
		{
			<button class="user-action-btn">Message</button>
		}
	</section>

	<section>
		<div id="avatar-cropper-section">
			<div class="avatar-cropper-wrapper">
				<img id="cropper-image" src="#" alt="Image for cropping" />
			</div>
			<div class="d-flex align-content-center justify-content-end gap-3 mt-2 mb-5">
				<button id="cancel-avatar-btn" class="button-cancel-cropping" type="button">Cancel</button>
				<button id="save-avatar-btn" class="button-save-avatar" type="button">Save</button>
			</div>
		</div>
	</section>

	<section class="mb-4">
		@if (Model.Friends != null)
		{
			if (Model.Friends.Count == 1)
			{
				<a asp-controller="Contacts" asp-action="Friends" asp-route-login="@Model.Login" class="text-decoration-none me-5 py-1 pe-1 text-white">1<span class="ms-1 text-muted"> friend</span></a>
			}
			else
			{
				<a asp-controller="Contacts" asp-action="Friends" asp-route-login="@Model.Login" class="text-decoration-none me-5 py-1 pe-1 text-white">@Model.Friends.Count<span class="ms-1 text-muted"> friends</span></a>
			}
		}
		@if (Model.Followers != null)
		{
			if (Model.Followers.Count == 1)
			{
				<a asp-controller="Contacts" asp-action="Followers" asp-route-login="@Model.Login" class="text-decoration-none me-5 py-1 pe-1 text-white">1<span class="ms-1 text-muted"> follower</span></a>
			}
			else
			{
				<a asp-controller="Contacts" asp-action="Followers" asp-route-login="@Model.Login" class="text-decoration-none me-5 py-1 pe-1 text-white">@Model.Followers.Count<span class="ms-1 text-muted"> followers</span></a>
			}
		}
		@if (Model.Followings != null)
		{
			if (Model.Followings.Count == 1)
			{
				<a asp-controller="Contacts" asp-action="Followings" asp-route-login="@Model.Login" class="text-decoration-none me-5 py-1 pe-1 text-white">1<span class="ms-1 text-muted"> following</span></a>
			}
			else
			{
				<a asp-controller="Contacts" asp-action="Followings" asp-route-login="@Model.Login" class="text-decoration-none me-5 py-1 pe-1 text-white">@Model.Followings.Count<span class="ms-1 text-muted"> followings</span></a>
			}
		}
	</section>
</section>

<section class="mb-2">
	<span class="d-block mb-1 user-name text-white">@Model.Name</span>
	<span class="user-description">@Model.Description</span>
</section>

<hr />

@if (pcConfig != null)
{
	<section class="pc-config-section">
		@if (pcConfig.Type != null)
		{
			<div class="mb-2 text-end">
				@if (pcConfig.Type.Name == "Desktop")
				{
					<i class="fa fa-display fs-6 me-1"></i>
				}
				else if (pcConfig.Type.Name == "Laptop")
				{
					<i class="fa fa-laptop fs-6 me-1"></i>
				}
				<span>@pcConfig.Type.Name</span>
			</div>
		}
		@if (pcConfig.HasAnyComponents)
		{
			<table class="table-responsive table-sm w-100 pc-components-table mb-2">
				<thead>
					<tr>
						<th>Type</th>
						<th>Name</th>
						<th>Price</th>
					</tr>
				</thead>
				<tbody>
					@if (pcConfig.Processor != null)
					{
						<tr>
							<td><span>Processor</span></td>
							<td>
								<span id=@($"openModal-{typeof(Processor).Name}-{pcConfig.Processor.Id}") class="pc-component-name" translate="no">
									@pcConfig.Processor.DisplayName
								</span>
								@await Html.PartialAsync("PcComponents/_ComponentModalPartial", pcConfig.Processor)
							</td>

							@Html.RenderPriceInTable(pcConfig.Processor.Price)
						</tr>
					}
					@if (pcConfig.VideoCard != null)
					{
						<tr>
							<td><span>Video Сard</span></td>
							<td>
								<span id=@($"openModal-{typeof(VideoCard).Name}-{pcConfig.VideoCard.Id}") class="pc-component-name" translate="no">
									@pcConfig.VideoCard.DisplayName
								</span>
								@await Html.PartialAsync("PcComponents/_ComponentModalPartial", pcConfig.VideoCard)
							</td>
							@Html.RenderPriceInTable(pcConfig.VideoCard.Price)
						</tr>
					}
					@if (pcConfig.Motherboard != null)
					{
						<tr>
							<td><span>Motherboard</span></td>
							<td>
								<span id=@($"openModal-{typeof(Motherboard).Name}-{pcConfig.Motherboard.Id}") class="pc-component-name" translate="no">
									@pcConfig.Motherboard.DisplayName
								</span>
								@await Html.PartialAsync("PcComponents/_ComponentModalPartial", pcConfig.Motherboard)
							</td>
							@Html.RenderPriceInTable(pcConfig.Motherboard.Price)
						</tr>
					}
					@if (pcConfig.PowerSupply != null)
					{
						<tr>
							<td><span>Power Supply</span></td>
							<td>
								<span id=@($"openModal-{typeof(PowerSupply).Name}-{pcConfig.PowerSupply.Id}") class="pc-component-name" translate="no">
									@pcConfig.PowerSupply.DisplayName
								</span>
								@await Html.PartialAsync("PcComponents/_ComponentModalPartial", pcConfig.PowerSupply)
							</td>
							@Html.RenderPriceInTable(pcConfig.PowerSupply.Price)
						</tr>
					}
					@if (rams != null && rams.Length != 0)
					{
						for (int i = 0; i < rams.Length; i++)
						{
							<tr>
								@if (rams.Length == 1)
								{
									<td><span>RAM</span></td>
								}
								else
								{
									<td><span>RAM <sup>@(i + 1)</sup></span></td>
								}
								<td>
									<span id=@($"openModal-{typeof(Ram).Name}-{rams[i]?.Id}") class="pc-component-name" translate="no">
										@rams[i]?.DisplayName
									</span>
									@await Html.PartialAsync("PcComponents/_ComponentModalPartial", rams[i])
								</td>
								@Html.RenderPriceInTable(rams[i]?.Price)
							</tr>
						}
					}
					@if (ssds != null && ssds.Length != 0)
					{
						for (int i = 0; i < ssds.Length; i++)
						{
							<tr>
								@if (ssds.Length == 1)
								{
									<td><span>SSD</span></td>
								}
								else
								{
									<td><span>SSD <sup>@(i + 1)</sup></span></td>
								}
								<td>
									<span id=@($"openModal-{typeof(Ssd).Name}-{ssds[i]?.Id}") class="pc-component-name" translate="no">
										@ssds[i]?.DisplayName
									</span>
									@await Html.PartialAsync("PcComponents/_ComponentModalPartial", ssds[i])
								</td>
								@Html.RenderPriceInTable(ssds[i]?.Price)
							</tr>
						}
					}
					@if (hdds != null && hdds.Length != 0)
					{
						for (int i = 0; i < hdds.Length; i++)
						{
							<tr>
								@if (hdds.Length == 1)
								{
									<td><span>HDD</span></td>
								}
								else
								{
									<td><span>HDD <sup>@(i + 1)</sup></span></td>
								}
								<td>
									<span id=@($"openModal-{typeof(Hdd).Name}-{hdds[i]?.Id}") class="pc-component-name" translate="no">
										@hdds[i]?.DisplayName
									</span>
									@await Html.PartialAsync("PcComponents/_ComponentModalPartial", hdds[i])
								</td>
								@Html.RenderPriceInTable(hdds[i]?.Price)
							</tr>
						}
					}
				</tbody>
				<tfoot>
					<tr>
						<td colspan="2">
							Total
							@if (!pcConfig.AreAllComponentsDefault)
							{
								<i class="ps-1 fs-5 fa fa-circle-exclamation text-warning" title="Some components were entered by a user and may be inaccurate."></i>
							}
						</td>
						@Html.RenderPriceInTable(pcConfig.TotalPrice)
					</tr>
				</tfoot>
			</table>
		}
		else
		{
			@if (Model.Id == userId)
			{
				<div class="text-center text-muted mb-3">
					You haven't selected any components for your configuration yet. You can do this in the <b>settings</b> or by clicking the <b>button below</b>.
				</div>
			}
			else
			{
				<div class="text-center text-muted mb-3">
					This user hasn't selected any components for their configuration yet.
				</div>
			}
		}
		@if (Model.Id == userId)
		{
			<div class="d-flex justify-content-center">
				<a class="button-more" asp-controller="PcSetup" asp-action="Index" asp-route-id="@pcConfig.Id">
					Configure
				</a>
			</div>
		}
		else if (pcConfig.HasAnyComponents)
		{
			<div class="d-flex justify-content-center">
				<a class="button-more" asp-controller="PcSetup" asp-action="Index" asp-route-id="@pcConfig.Id">
					More
				</a>
			</div>
		}
	</section>
}

<section>
	<h5 class="mb-2">Comments</h5>
	<form class="ps-2 pe-2 mb-4" asp-action="CreateComment" asp-route-profileId="@Model.Id">
		<textarea id="comment-input" class="comment-input" placeholder="Add a comment" name="commentText" type="text" autocomplete="off" title="" required oninput="this.style.height = ''; this.style.height = this.scrollHeight + 'px'"></textarea>
		<div class="d-flex justify-content-end">
			<button id="submit-comment-button" class="submit-comment-button" type="submit" title="Post Comment">Comment</button>
		</div>
	</form>

	@if (Model.ReceivedComments != null)
	{
		@if (Model.ReceivedComments.Count > 0)
		{
			foreach (Comment comment in Model.ReceivedComments)
			{
				if (comment.Commentator != null)
				{
					<div class="comment-container">
						<div class="d-flex justify-content-start align-items-start mb-1">
							<div class="d-flex align-items-center ms-1 me-2">
								<img src="@comment.Commentator.AvatarUrl" alt="User avatar @comment.Commentator.Name"
									 title="@comment.Commentator.Login" width="45" height="45"
									 class="user-avatar" />
							</div>
							<div class="d-flex justify-content-between align-items-center w-100">
								<div>
									<a asp-route-login="@comment.Commentator.Login" class="comment-login" title="@comment.Commentator.Name">
										@comment.Commentator.Login
									</a>
									<span class="comment-date" title="@comment.CreatedAt.ToLocalTime().ToString("dd MMMM, yyyy 'at' HH:mm:ss", new CultureInfo("en-US"))">
										@if (DateTime.UtcNow.Year == comment.CreatedAt.Year)
										{
											@comment.CreatedAt.ToLocalTime().ToString("d MMMM 'at' HH:mm", new CultureInfo("en-US"))
										}
										else
										{
											@comment.CreatedAt.ToLocalTime().ToString("d MMMM, yyyy 'at' HH:mm", new CultureInfo("en-US"))
										}
									</span>
								</div>
								@if (comment.CommentatorId == userId || comment.UserId == userId)
								{
									<div>
										<form asp-action="DeleteComment" asp-route-id="@comment.Id">
											<button class="delete-comment-button" title="Delete"><i class="d-flex justify-content-center align-items-center fa fa-trash text-muted"></i></button>
										</form>
									</div>
								}
							</div>
						</div>
						<div class="comment-text">
							@Html.Raw(HttpUtility.HtmlEncode(comment.Text).Replace("\n", "<br />"))
						</div>
					</div>
				}
			}

			<div class="d-flex justify-content-center mt-4">
				@await Html.PartialAsync("_PageNavigator", new PaginationViewModel(page, commentCount, "Index", pageSize, "commentPage"))
			</div>
		}
		else
		{
			<p class="text-muted text-center">No comments yet.</p>
		}

	}

</section>

<script>
	const input = document.getElementById('comment-input');
	const button = document.getElementById('submit-comment-button');
	button.style.display = 'none';

	input.addEventListener('input', () => {
	  button.style.display = input.value.trim().length > 0 ? 'inline-block' : 'none';
	});
</script>