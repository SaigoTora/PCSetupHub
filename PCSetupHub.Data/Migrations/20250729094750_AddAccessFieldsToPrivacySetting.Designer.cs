// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PCSetupHub.Data;

#nullable disable

namespace PCSetupHub.Data.Migrations
{
    [DbContext(typeof(PcSetupContext))]
    [Migration("20250729094750_AddAccessFieldsToPrivacySetting")]
    partial class AddAccessFieldsToPrivacySetting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PCSetupHub.Data.Models.Attributes.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Color", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Hardware.Hdd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Interface")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Hdd", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Hardware.Motherboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("MaxMemory")
                        .HasColumnType("int");

                    b.Property<byte>("MemorySlots")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("Socket")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Motherboard", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Hardware.PcConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MotherboardId")
                        .HasColumnType("int");

                    b.Property<int?>("PowerSupplyId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessorId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VideoCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MotherboardId");

                    b.HasIndex("PowerSupplyId");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("VideoCardId");

                    b.ToTable("PcConfiguration", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Hardware.PcType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PcType", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Hardware.PowerSupply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Efficiency")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Modular")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("Wattage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PowerSupply", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Hardware.Processor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("BoostClock")
                        .HasColumnType("real");

                    b.Property<float>("CoreClock")
                        .HasColumnType("real");

                    b.Property<byte>("CoreCount")
                        .HasColumnType("tinyint");

                    b.Property<string>("Graphics")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<bool>("SMT")
                        .HasColumnType("bit");

                    b.Property<int>("TDP")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Processor", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Hardware.Ram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CASLatency")
                        .HasColumnType("float");

                    b.Property<double>("FirstWordLatency")
                        .HasColumnType("float");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<byte>("MemoryType")
                        .HasColumnType("tinyint");

                    b.Property<int>("ModuleCapacity")
                        .HasColumnType("int");

                    b.Property<byte>("ModulesCount")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("Ram", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Hardware.Ssd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Cache")
                        .HasColumnType("int");

                    b.Property<double>("Capacity")
                        .HasColumnType("float");

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Interface")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Ssd", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Hardware.VideoCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BoostClock")
                        .HasColumnType("int");

                    b.Property<string>("Chipset")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CoreClock")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<short?>("Length")
                        .HasColumnType("smallint");

                    b.Property<float>("Memory")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("VideoCard", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Relationships.ColorHdd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("HddId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("HddId");

                    b.ToTable("ColorHdd", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Relationships.ColorMotherboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("MotherboardId");

                    b.ToTable("ColorMotherboard", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Relationships.ColorPowerSupply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("PowerSupplyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("PowerSupplyId");

                    b.ToTable("ColorPowerSupply", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Relationships.ColorRam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("RamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("RamId");

                    b.ToTable("ColorRam", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Relationships.ColorVideoCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("VideoCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("VideoCardId");

                    b.ToTable("ColorVideoCard", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Relationships.PcConfigurationHdd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HddId")
                        .HasColumnType("int");

                    b.Property<int>("PcConfigurationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HddId");

                    b.HasIndex("PcConfigurationId");

                    b.ToTable("PcConfigurationHdd", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Relationships.PcConfigurationRam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PcConfigurationId")
                        .HasColumnType("int");

                    b.Property<int>("RamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PcConfigurationId");

                    b.HasIndex("RamId");

                    b.ToTable("PcConfigurationRam", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Relationships.PcConfigurationSsd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PcConfigurationId")
                        .HasColumnType("int");

                    b.Property<int>("SsdId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PcConfigurationId");

                    b.HasIndex("SsdId");

                    b.ToTable("PcConfigurationSsd", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Users.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommentatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentatorId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Users.Friendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("FriendId")
                        .HasColumnType("int");

                    b.Property<int>("InitiatorId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("StatusId");

                    b.ToTable("Friendship", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Users.FriendshipStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("FriendshipStatus", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Users.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Users.PrivacyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PrivacyLevel", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Users.PrivacySetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentWritingAccessId")
                        .HasColumnType("int");

                    b.Property<int>("FollowersAccessId")
                        .HasColumnType("int");

                    b.Property<int>("FollowingsAccessId")
                        .HasColumnType("int");

                    b.Property<int>("FriendsAccessId")
                        .HasColumnType("int");

                    b.Property<int>("MessagesAccessId")
                        .HasColumnType("int");

                    b.Property<int>("PcConfigAccessId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentWritingAccessId");

                    b.HasIndex("FollowersAccessId");

                    b.HasIndex("FollowingsAccessId");

                    b.HasIndex("FriendsAccessId");

                    b.HasIndex("MessagesAccessId");

                    b.HasIndex("PcConfigAccessId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PrivacySetting", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Hardware.PcConfiguration", b =>
                {
                    b.HasOne("PCSetupHub.Data.Models.Hardware.Motherboard", "Motherboard")
                        .WithMany("PcConfigurations")
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PCSetupHub.Data.Models.Hardware.PowerSupply", "PowerSupply")
                        .WithMany("PcConfigurations")
                        .HasForeignKey("PowerSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PCSetupHub.Data.Models.Hardware.Processor", "Processor")
                        .WithMany("PcConfigurations")
                        .HasForeignKey("ProcessorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PCSetupHub.Data.Models.Hardware.PcType", "Type")
                        .WithMany("PcConfigurations")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PCSetupHub.Data.Models.Users.User", "User")
                        .WithOne("PcConfiguration")
                        .HasForeignKey("PCSetupHub.Data.Models.Hardware.PcConfiguration", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCSetupHub.Data.Models.Hardware.VideoCard", "VideoCard")
                        .WithMany("PcConfigurations")
                        .HasForeignKey("VideoCardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Motherboard");

                    b.Navigation("PowerSupply");

                    b.Navigation("Processor");

                    b.Navigation("Type");

                    b.Navigation("User");

                    b.Navigation("VideoCard");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Relationships.ColorHdd", b =>
                {
                    b.HasOne("PCSetupHub.Data.Models.Attributes.Color", "Color")
                        .WithMany("ColorHdds")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCSetupHub.Data.Models.Hardware.Hdd", "Hdd")
                        .WithMany("ColorHdds")
                        .HasForeignKey("HddId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Hdd");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Relationships.ColorMotherboard", b =>
                {
                    b.HasOne("PCSetupHub.Data.Models.Attributes.Color", "Color")
                        .WithMany("ColorMotherboards")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCSetupHub.Data.Models.Hardware.Motherboard", "Motherboard")
                        .WithMany("ColorMotherboards")
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Motherboard");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Relationships.ColorPowerSupply", b =>
                {
                    b.HasOne("PCSetupHub.Data.Models.Attributes.Color", "Color")
                        .WithMany("ColorPowerSupplies")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCSetupHub.Data.Models.Hardware.PowerSupply", "PowerSupply")
                        .WithMany("ColorPowerSupplies")
                        .HasForeignKey("PowerSupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("PowerSupply");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Relationships.ColorRam", b =>
                {
                    b.HasOne("PCSetupHub.Data.Models.Attributes.Color", "Color")
                        .WithMany("ColorRams")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCSetupHub.Data.Models.Hardware.Ram", "Ram")
                        .WithMany("ColorRams")
                        .HasForeignKey("RamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Ram");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Relationships.ColorVideoCard", b =>
                {
                    b.HasOne("PCSetupHub.Data.Models.Attributes.Color", "Color")
                        .WithMany("ColorVideoCards")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCSetupHub.Data.Models.Hardware.VideoCard", "VideoCard")
                        .WithMany("ColorVideoCards")
                        .HasForeignKey("VideoCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("VideoCard");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Relationships.PcConfigurationHdd", b =>
                {
                    b.HasOne("PCSetupHub.Data.Models.Hardware.Hdd", "Hdd")
                        .WithMany("PcConfigurationHdds")
                        .HasForeignKey("HddId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCSetupHub.Data.Models.Hardware.PcConfiguration", "PcConfiguration")
                        .WithMany("PcConfigurationHdds")
                        .HasForeignKey("PcConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hdd");

                    b.Navigation("PcConfiguration");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Relationships.PcConfigurationRam", b =>
                {
                    b.HasOne("PCSetupHub.Data.Models.Hardware.PcConfiguration", "PcConfiguration")
                        .WithMany("PcConfigurationRams")
                        .HasForeignKey("PcConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCSetupHub.Data.Models.Hardware.Ram", "Ram")
                        .WithMany("PcConfigurationRams")
                        .HasForeignKey("RamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PcConfiguration");

                    b.Navigation("Ram");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Relationships.PcConfigurationSsd", b =>
                {
                    b.HasOne("PCSetupHub.Data.Models.Hardware.PcConfiguration", "PcConfiguration")
                        .WithMany("PcConfigurationSsds")
                        .HasForeignKey("PcConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCSetupHub.Data.Models.Hardware.Ssd", "Ssd")
                        .WithMany("PcConfigurationSsds")
                        .HasForeignKey("SsdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PcConfiguration");

                    b.Navigation("Ssd");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Users.Comment", b =>
                {
                    b.HasOne("PCSetupHub.Data.Models.Users.User", "Commentator")
                        .WithMany("WrittenComments")
                        .HasForeignKey("CommentatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PCSetupHub.Data.Models.Users.User", "User")
                        .WithMany("ReceivedComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Commentator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Users.Friendship", b =>
                {
                    b.HasOne("PCSetupHub.Data.Models.Users.User", "Friend")
                        .WithMany("ReceivedFriendRequests")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCSetupHub.Data.Models.Users.User", "Initiator")
                        .WithMany("SentFriendRequests")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCSetupHub.Data.Models.Users.FriendshipStatus", "Status")
                        .WithMany("Friendships")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("Initiator");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Users.Message", b =>
                {
                    b.HasOne("PCSetupHub.Data.Models.Users.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCSetupHub.Data.Models.Users.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Users.PrivacySetting", b =>
                {
                    b.HasOne("PCSetupHub.Data.Models.Users.PrivacyLevel", "CommentWritingAccess")
                        .WithMany("CommentWritingAccessSettings")
                        .HasForeignKey("CommentWritingAccessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCSetupHub.Data.Models.Users.PrivacyLevel", "FollowersAccess")
                        .WithMany("FollowersAccessSettings")
                        .HasForeignKey("FollowersAccessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCSetupHub.Data.Models.Users.PrivacyLevel", "FollowingsAccess")
                        .WithMany("FollowingsAccessSettings")
                        .HasForeignKey("FollowingsAccessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCSetupHub.Data.Models.Users.PrivacyLevel", "FriendsAccess")
                        .WithMany("FriendsAccessSettings")
                        .HasForeignKey("FriendsAccessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCSetupHub.Data.Models.Users.PrivacyLevel", "MessagesAccess")
                        .WithMany("MessagesAccessSettings")
                        .HasForeignKey("MessagesAccessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCSetupHub.Data.Models.Users.PrivacyLevel", "PcConfigAccess")
                        .WithMany("PcConfigAccessSettings")
                        .HasForeignKey("PcConfigAccessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCSetupHub.Data.Models.Users.User", "User")
                        .WithOne("PrivacySetting")
                        .HasForeignKey("PCSetupHub.Data.Models.Users.PrivacySetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentWritingAccess");

                    b.Navigation("FollowersAccess");

                    b.Navigation("FollowingsAccess");

                    b.Navigation("FriendsAccess");

                    b.Navigation("MessagesAccess");

                    b.Navigation("PcConfigAccess");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Attributes.Color", b =>
                {
                    b.Navigation("ColorHdds");

                    b.Navigation("ColorMotherboards");

                    b.Navigation("ColorPowerSupplies");

                    b.Navigation("ColorRams");

                    b.Navigation("ColorVideoCards");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Hardware.Hdd", b =>
                {
                    b.Navigation("ColorHdds");

                    b.Navigation("PcConfigurationHdds");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Hardware.Motherboard", b =>
                {
                    b.Navigation("ColorMotherboards");

                    b.Navigation("PcConfigurations");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Hardware.PcConfiguration", b =>
                {
                    b.Navigation("PcConfigurationHdds");

                    b.Navigation("PcConfigurationRams");

                    b.Navigation("PcConfigurationSsds");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Hardware.PcType", b =>
                {
                    b.Navigation("PcConfigurations");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Hardware.PowerSupply", b =>
                {
                    b.Navigation("ColorPowerSupplies");

                    b.Navigation("PcConfigurations");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Hardware.Processor", b =>
                {
                    b.Navigation("PcConfigurations");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Hardware.Ram", b =>
                {
                    b.Navigation("ColorRams");

                    b.Navigation("PcConfigurationRams");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Hardware.Ssd", b =>
                {
                    b.Navigation("PcConfigurationSsds");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Hardware.VideoCard", b =>
                {
                    b.Navigation("ColorVideoCards");

                    b.Navigation("PcConfigurations");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Users.FriendshipStatus", b =>
                {
                    b.Navigation("Friendships");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Users.PrivacyLevel", b =>
                {
                    b.Navigation("CommentWritingAccessSettings");

                    b.Navigation("FollowersAccessSettings");

                    b.Navigation("FollowingsAccessSettings");

                    b.Navigation("FriendsAccessSettings");

                    b.Navigation("MessagesAccessSettings");

                    b.Navigation("PcConfigAccessSettings");
                });

            modelBuilder.Entity("PCSetupHub.Data.Models.Users.User", b =>
                {
                    b.Navigation("PcConfiguration")
                        .IsRequired();

                    b.Navigation("PrivacySetting")
                        .IsRequired();

                    b.Navigation("ReceivedComments");

                    b.Navigation("ReceivedFriendRequests");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentFriendRequests");

                    b.Navigation("SentMessages");

                    b.Navigation("WrittenComments");
                });
#pragma warning restore 612, 618
        }
    }
}
